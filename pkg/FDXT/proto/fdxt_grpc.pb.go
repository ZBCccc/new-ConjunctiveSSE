// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: pkg/FDXT/proto/fdxt.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FDXTService_Update_FullMethodName = "/proto.FDXTService/Update"
	FDXTService_Search_FullMethodName = "/proto.FDXTService/Search"
)

// FDXTServiceClient is the client API for FDXTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FDXTServiceClient interface {
	Update(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateRequest, UpdateResponse], error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type fDXTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFDXTServiceClient(cc grpc.ClientConnInterface) FDXTServiceClient {
	return &fDXTServiceClient{cc}
}

func (c *fDXTServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateRequest, UpdateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FDXTService_ServiceDesc.Streams[0], FDXTService_Update_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateRequest, UpdateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FDXTService_UpdateClient = grpc.ClientStreamingClient[UpdateRequest, UpdateResponse]

func (c *fDXTServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, FDXTService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FDXTServiceServer is the server API for FDXTService service.
// All implementations must embed UnimplementedFDXTServiceServer
// for forward compatibility.
type FDXTServiceServer interface {
	Update(grpc.ClientStreamingServer[UpdateRequest, UpdateResponse]) error
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedFDXTServiceServer()
}

// UnimplementedFDXTServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFDXTServiceServer struct{}

func (UnimplementedFDXTServiceServer) Update(grpc.ClientStreamingServer[UpdateRequest, UpdateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFDXTServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFDXTServiceServer) mustEmbedUnimplementedFDXTServiceServer() {}
func (UnimplementedFDXTServiceServer) testEmbeddedByValue()                     {}

// UnsafeFDXTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FDXTServiceServer will
// result in compilation errors.
type UnsafeFDXTServiceServer interface {
	mustEmbedUnimplementedFDXTServiceServer()
}

func RegisterFDXTServiceServer(s grpc.ServiceRegistrar, srv FDXTServiceServer) {
	// If the following call pancis, it indicates UnimplementedFDXTServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FDXTService_ServiceDesc, srv)
}

func _FDXTService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FDXTServiceServer).Update(&grpc.GenericServerStream[UpdateRequest, UpdateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FDXTService_UpdateServer = grpc.ClientStreamingServer[UpdateRequest, UpdateResponse]

func _FDXTService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FDXTServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FDXTService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FDXTServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FDXTService_ServiceDesc is the grpc.ServiceDesc for FDXTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FDXTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FDXTService",
	HandlerType: (*FDXTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _FDXTService_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _FDXTService_Update_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/FDXT/proto/fdxt.proto",
}
